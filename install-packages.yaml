---
- name: Prepare hosts
  hosts: all
  become: true

  pre_tasks:
    - name: Add require modules
      ansible.builtin.lineinfile:
        dest: /etc/modules-load.d/containerd.conf
        line: "{{ item }}"
        create: yes
      loop:
        - overlay
        - br_netfilter

    - name: Load containerd modules
      community.general.modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Apply sysctl required settings
      ansible.posix.sysctl:
        name: "{{ item }}"
        value: "1"
        sysctl_file: /etc/sysctl.d/99-kubernetes.conf
        reload: yes
      loop:
        - net.bridge.bridge-nf-call-iptables
        - net.ipv4.ip_forward
        - net.bridge.bridge-nf-call-ip6tables
    
    - name: Install require packages
      ansible.builtin.apt:
        name:
          - apt-transport-https 
          - ca-certificates 
          - curl 
          - gpg
          - containerd
        state: present
        update_cache: yes
        force_apt_get: yes
  
  tasks:
    - name: Create directory for keyrings
      ansible.builtin.file:
        path: /etc/apt/keyrings
        mode: 0755
    
    - name: Get keys
      ansible.builtin.shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    
    - name: Add k8s repo
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /"
        state: present
        filename: kubernetes
        update_cache: yes
        mode: 0644

    - name: install k8s packages
      ansible.builtin.apt:
        name:
          - kubectl
          - kubeadm
          - kubelet
        state: present
        update_cache: yes
        force_apt_get: yes

        - hosts: masters
  become: yes
  tasks:
  - name: initialize the cluster
    shell: kubeadm init --service-cidr 10.96.0.0/14 --pod-network-cidr 10.90.0.0/16 --kubernetes-version stable-1.22  --control-plane-endpoint kube-apiserver:6443 --cri-socket=/run/containerd/containerd.sock >> cluster_initialized.txt
    args:
      chdir: $HOME
      creates: cluster_initialized.txt

  - name: create .kube directory
    become: yes
    become_user: ubuntu
    file:
      path: $HOME/.kube
      state: directory
      mode: "0755"

  - name: copy admin.conf to user's kube config
    copy:
      src: /etc/kubernetes/admin.conf
      dest: /home/ubuntu/.kube/config
      remote_src: yes
      owner: ubuntu

  - name: Create kube-router kube-config
    become: yes
    become_user: ubuntu
    shell: kubectl create configmap kube-router-kubeconfig -n kube-system --from-file=.kube/config >> kuberouter-config-setup.txt
    args:
      chdir: $HOME
      creates: kuberouter-config-setup.txt

  - name: install Pod network
    become: yes
    become_user: ubuntu
    shell: kubectl apply -f kube-router-v1.yaml >> pod_network_setup.txt
    args:
      chdir: $HOME
      creates: pod_network_setup.txt

  - name: Annotate Node
    become: yes
    become_user: ubuntu
    shell:
      cmd: |
        kubectl annotate node $(uname -n) "kube-router.io/node.asn=64512" --overwrite
        kubectl annotate node $(uname -n) "kube-router.io/peer.ips=172.20.22.253,172.20.22.254" --overwrite
        kubectl annotate node $(uname -n) "kube-router.io/peer.asns=65000,65000" --overwrite
    args:
      chdir: $HOME

  - name: add kube-apiserver service
    become: yes
    become_user: ubuntu
    shell: kubectl apply -f kube-apiserver.yaml >> kube-apiserver.txt
    args:
      chdir: $HOME
      creates: kube-apiserver.txt

      - hosts: soldier76
  become: yes
  gather_facts: false
  tasks:
  - name: get join command
    shell: kubeadm token create --print-join-command
    register: join_command_raw

  - name: set join command
    set_fact:
      join_command: "{{ join_command_raw.stdout_lines[0] }}"

- hosts: workers
  become: yes
  tasks:
  - name: HA Control DNS
    lineinfile:
      dest: /etc/hosts
      line: '10.96.0.2 kube-apiserver'
      search_string: 'kube-apiserver'
  - name: join cluster
    shell: "{{ hostvars['soldier76'].join_command }} --cri-socket=/run/containerd/containerd.sock >> node_joined.txt"
    args:
      chdir: $HOME
      creates: node_joined.txt